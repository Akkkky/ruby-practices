#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'

RENDER_COL_LENGTH = 8

def main
  option = ARGV.getopts('l')

  if ARGV[0]
    arguments = ARGV
    is_arguments_file = true
  else
    arguments = get_standard_input
    is_arguments_file = false
  end

  # p "arguments : #{arguments}"

  run_wc(arguments, is_arguments_file, option)
end

def run_wc(arguments, is_arguments_file, option)
  if is_arguments_file
    # p "is_arguments_file : #{is_arguments_file}"
  else
    results = build_data(arguments)
    render_standard_input(results, option)
  end
  
end

def build_data(arguments)
  {
    lines: get_number_of_lines(arguments),
    words: get_number_of_words(arguments),
    bytes: get_number_of_bytes(arguments)
  }
end

def get_standard_input
  inputs = []
  while line = $stdin.gets
    unless line.chomp.empty?
      #  inputs << line.chomp
      inputs << line
    end
  end
  inputs
end

def get_number_of_lines(arguments)
  arguments.length if arguments.instance_of?(Array) # 配列で渡された場合は配列数が行数
end

def get_number_of_words(arguments)
  arguments.each.sum do |argument|
    argument.split.length
  end
end

def get_number_of_bytes(arguments)
  arguments.each.sum(&:bytesize)
end

def render_standard_input(results, option)
  if option['l']
    puts results[:lines].to_s.rjust(RENDER_COL_LENGTH)
  else
    puts [
      results[:lines].to_s.rjust(RENDER_COL_LENGTH),
      results[:words].to_s.rjust(RENDER_COL_LENGTH),
      results[:bytes].to_s.rjust(RENDER_COL_LENGTH)
    ].join
  end
end

main
